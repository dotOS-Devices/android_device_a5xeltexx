diff --git a/bluetooth/1.0/default/vendor_interface.cc b/bluetooth/1.0/default/vendor_interface.cc
index 6ce2f11..3c69438 100644
--- a/bluetooth/1.0/default/vendor_interface.cc
+++ b/bluetooth/1.0/default/vendor_interface.cc
@@ -337,6 +337,8 @@ void VendorInterface::OnFirmwareConfigured(uint8_t result) {
     initialize_complete_cb_ = nullptr;
   }
 
+  lib_interface_->op(BT_VND_OP_SCO_CFG, nullptr);
+
   lib_interface_->op(BT_VND_OP_GET_LPM_IDLE_TIMEOUT, &lpm_timeout_ms);
   ALOGI("%s: lpm_timeout_ms %d", __func__, lpm_timeout_ms);
 
diff --git a/gnss/1.0/default/Gnss.cpp b/gnss/1.0/default/Gnss.cpp
old mode 100644
new mode 100755
index cfcee24..10bc2d2
--- a/gnss/1.0/default/Gnss.cpp
+++ b/gnss/1.0/default/Gnss.cpp
@@ -46,6 +46,25 @@ GpsCallbacks Gnss::sGnssCb = {
     .gnss_sv_status_cb = gnssSvStatusCb,
 };
 
+/*
+ * AGnssRilCallback implements the callback methods required by the AGnssRil
+ * interface.
+ */
+struct AGnssRilCallback : IAGnssRilCallback {
+    Return<void> requestSetIdCb(uint32_t setIdFlag) override;
+    Return<void> requestRefLocCb() override;
+};
+
+Return<void> AGnssRilCallback::requestSetIdCb(uint32_t setIdFlag) {
+    ALOGI("%s: called with setIdFlag=%d", __func__, setIdFlag);
+    return Void();
+}
+
+Return<void> AGnssRilCallback::requestRefLocCb() {
+    ALOGI("%s: called", __func__);
+    return Void();
+}
+
 uint32_t Gnss::sCapabilitiesCached = 0;
 uint16_t Gnss::sYearOfHwCached = 0;
 
@@ -511,6 +530,12 @@ Return<sp<IAGnssRil>> Gnss::getExtensionAGnssRil()  {
             ALOGE("%s GnssRil interface not implemented by GNSS HAL", __func__);
         } else {
             mGnssRil = new AGnssRil(agpsRilIface);
+            sp<IAGnssRilCallback> aGnssRilCb = new AGnssRilCallback();
+            if (mGnssRil != nullptr) {
+                mGnssRil->setCallback(aGnssRilCb);
+            } else {
+                ALOGE("Unable to initialize AGnss Ril interface\n");
+            }
         }
     }
     return mGnssRil;
